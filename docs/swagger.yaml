basePath: /
definitions:
  GoPVZ_internal_dto.Error:
    properties:
      message:
        type: string
    type: object
  GoPVZ_internal_dto.PostDummyLoginJSONBody:
    properties:
      role:
        $ref: '#/definitions/GoPVZ_internal_dto.PostDummyLoginJSONBodyRole'
    type: object
  GoPVZ_internal_dto.PostDummyLoginJSONBodyRole:
    enum:
    - employee
    - moderator
    type: string
    x-enum-varnames:
    - PostDummyLoginJSONBodyRoleEmployee
    - PostDummyLoginJSONBodyRoleModerator
  GoPVZ_internal_dto.PostLoginJSONBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  GoPVZ_internal_dto.PostRegisterJSONBody:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/GoPVZ_internal_dto.PostRegisterJSONBodyRole'
    type: object
  GoPVZ_internal_dto.PostRegisterJSONBodyRole:
    enum:
    - employee
    - moderator
    type: string
    x-enum-varnames:
    - Employee
    - Moderator
  GoPVZ_internal_dto.TokenResponse:
    properties:
      token:
        type: string
    type: object
  GoPVZ_internal_dto.User:
    properties:
      email:
        type: string
      id:
        type: string
      role:
        $ref: '#/definitions/GoPVZ_internal_dto.UserRole'
    type: object
  GoPVZ_internal_dto.UserRole:
    enum:
    - employee
    - moderator
    type: string
    x-enum-varnames:
    - UserRoleEmployee
    - UserRoleModerator
host: localhost:8080
info:
  contact: {}
  description: Сервис для управления ПВЗ и приемкой товаров
  title: Backend service GoPVZ
  version: 1.0.0
paths:
  /dummyLogin:
    post:
      consumes:
      - application/json
      description: Генерирует токен без проверки пароля (для тестирования)
      parameters:
      - description: Роль пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/GoPVZ_internal_dto.PostDummyLoginJSONBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GoPVZ_internal_dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/GoPVZ_internal_dto.Error'
      summary: Получение тестового токена
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя по email и паролю
      parameters:
      - description: Данные для входа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/GoPVZ_internal_dto.PostLoginJSONBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GoPVZ_internal_dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/GoPVZ_internal_dto.Error'
      summary: Вход в систему
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя по email и паролю
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/GoPVZ_internal_dto.PostRegisterJSONBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/GoPVZ_internal_dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/GoPVZ_internal_dto.Error'
      summary: Регистрация пользователя
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: JWT авторизация с Bearer схемой
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
