// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/dummyLogin": {
            "post": {
                "description": "Генерирует токен без проверки пароля (для тестирования)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Получение тестового токена",
                "parameters": [
                    {
                        "description": "Роль пользователя",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.PostDummyLoginJSONBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.Error"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Аутентификация пользователя по email и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Вход в систему",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.PostLoginJSONBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.Error"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Регистрирует нового пользователя по email и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.PostRegisterJSONBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/GoPVZ_internal_dto.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "GoPVZ_internal_dto.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "GoPVZ_internal_dto.PostDummyLoginJSONBody": {
            "type": "object",
            "properties": {
                "role": {
                    "$ref": "#/definitions/GoPVZ_internal_dto.PostDummyLoginJSONBodyRole"
                }
            }
        },
        "GoPVZ_internal_dto.PostDummyLoginJSONBodyRole": {
            "type": "string",
            "enum": [
                "employee",
                "moderator"
            ],
            "x-enum-varnames": [
                "PostDummyLoginJSONBodyRoleEmployee",
                "PostDummyLoginJSONBodyRoleModerator"
            ]
        },
        "GoPVZ_internal_dto.PostLoginJSONBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "GoPVZ_internal_dto.PostRegisterJSONBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/GoPVZ_internal_dto.PostRegisterJSONBodyRole"
                }
            }
        },
        "GoPVZ_internal_dto.PostRegisterJSONBodyRole": {
            "type": "string",
            "enum": [
                "employee",
                "moderator"
            ],
            "x-enum-varnames": [
                "Employee",
                "Moderator"
            ]
        },
        "GoPVZ_internal_dto.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "GoPVZ_internal_dto.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/GoPVZ_internal_dto.UserRole"
                }
            }
        },
        "GoPVZ_internal_dto.UserRole": {
            "type": "string",
            "enum": [
                "employee",
                "moderator"
            ],
            "x-enum-varnames": [
                "UserRoleEmployee",
                "UserRoleModerator"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT авторизация с Bearer схемой",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Backend service GoPVZ",
	Description:      "Сервис для управления ПВЗ и приемкой товаров",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
